#!/bin/bash

## This script assumes that the JAVA_HOME environment variable is set
##   and that the PATH contains ${JAVA_HOME}/bin
## The script reads the file /usr/lib/jvm/javaversion.config
## which tells it what each java version is on your machine. See the accompanying
## README.md file
## It could easily be extended to include Java 9 and 10 too, buy at
## the time of writing I see little point because 12 is the current open JDK
## and 11 the LTS version. J8 is in because it is the default for many still.
##
## Usage: eval $(scriptname) e.g. eval $(J12)


contains(){
    local needle="$1"
    shift
    while [[ $# > 0 ]]; do
	haystack="$1"; shift
	if [[ $needle == $haystack ]]; then
	    return 0
	fi
    done
    return 1
}

## for easy config, declare your java paths here

jvmdir=/usr/lib/jvm
source ${jvmdir}/javaversions.conf


## get my name
thisname=$(basename $0)

OPATH=${PATH}

if [ "$#" = 0 ]; then
    thisjava=${!default}
    echo  using default >&2
else
    thisjava=$1; shift
    if [ "$thisjava" = "default" ]; then
      thisjava=${!thisjava}
    fi
fi

choix=""
while read line; do
    choice=(${line//=/ })
    choix="${choix} ${choice[0]}"
done < <(cat ${jvmdir}/javaversions.conf)

if contains $thisjava ${choix}; then
  thisjava=${!thisjava}
    # NJAVA_HOME=${jvmdir}/${!thisjava}
else
  # unravel
  thisjava=${!default}
  thisjava=${thisjava}
fi

# echo "chosen : ${thisjava}" >&2
NJAVA_HOME=${jvmdir}/${thisjava}

## edit path to use the new java_home
if [ $(echo $PATH | grep -q /jvm/) ] ; then
    # assume some java is in path
    p=$(echo $OPATH | sed -e "s@${JAVA_HOME}/bin@${NJAVA_HOME}/bin@")
else
    # prepend
    p="${NJAVA_HOME}/bin:${PATH}"
fi

## output modified env variables.
echo export JAVA_HOME=$NJAVA_HOME
echo export PATH=${p}
## java 8 does not understand preview
if [ "${java8}" = "${thisjava}" ]; then
    echo export _JAVA_OPTIONS="'-Dawt.useSystemAAFontSettings=gasp'"
else
    echo export _JAVA_OPTIONS="'-Dawt.useSystemAAFontSettings=gasp --enable-preview'"
fi
